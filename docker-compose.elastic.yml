version: "3.8"

secrets:
  ca.crt:
    file: ${SECRETS_DIR}/elastic_stack/secrets/certificate_authority/ca/ca.crt

  elasticsearch.keystore:
    file: ${SECRETS_DIR}/elastic_stack/secrets/elasticsearch.keystore

  elastic-stack-ca.p12:
    file: ${SECRETS_DIR}/elastic_stack/secrets/certificate_authority/elastic-stack-ca.p12

  elasticsearch.key:
    file: ${SECRETS_DIR}/elastic_stack/secrets/certificates/elasticsearch/elasticsearch.key

  elasticsearch.cert:
    file: ${SECRETS_DIR}/elastic_stack/secrets/certificates/elasticsearch/elasticsearch.crt

  kibana.key:
    file: ${SECRETS_DIR}/elastic_stack/secrets/certificates/kibana/kibana.key

  kibana.cert:
    file: ${SECRETS_DIR}/elastic_stack/secrets/certificates/kibana/kibana.crt

  logstash.pkcs8.key:
    file: ${SECRETS_DIR}/elastic_stack/secrets/certificates/logstash/logstash.pkcs8.key

  logstash.key:
    file: ${SECRETS_DIR}/elastic_stack/secrets/certificates/logstash/logstash.key

  logstash.p12:
    file: ${SECRETS_DIR}/elastic_stack/secrets/keystores/logstash/logstash.p12

  logstash.cert:
    file: ${SECRETS_DIR}/elastic_stack/secrets/certificates/logstash/logstash.crt

  fleet-server.cert:
    file: ${SECRETS_DIR}/elastic_stack/secrets/certificates/fleet-server/fleet-server.crt

  fleet-server.key:
    file: ${SECRETS_DIR}/elastic_stack/secrets/certificates/fleet-server/fleet-server.key

  packetbeat.key:
    file: ${SECRETS_DIR}/elastic_stack/secrets/certificates/packetbeat/packetbeat.key

  packetbeat.cert:
    file: ${SECRETS_DIR}/elastic_stack/secrets/certificates/packetbeat/packetbeat.crt

  filebeat.key:
    file: ${SECRETS_DIR}/elastic_stack/secrets/certificates/filebeat/filebeat.key

  filebeat.cert:
    file: ${SECRETS_DIR}/elastic_stack/secrets/certificates/filebeat/filebeat.crt

  metricbeat.key:
    file: ${SECRETS_DIR}/elastic_stack/secrets/certificates/metricbeat/metricbeat.key

  metricbeat.cert:
    file: ${SECRETS_DIR}/elastic_stack/secrets/certificates/metricbeat/metricbeat.crt


################
##  NETWORKS  ##
################
networks:
  elastic-net:
    name: elastic-net
    driver: bridge

  proxy-net:
    external: true

  weave-net:
    external: true

services:
  elasticsearch:
    container_name: elasticsearch
    hostname: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION}
    restart: unless-stopped
    environment:
      CONFIG_DIR: ${ELASTIC_DIR}/config
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ES_JAVA_OPTS: -Xmx${ELASTICSEARCH_HEAP} -Xms${ELASTICSEARCH_HEAP}
      bootstrap.memory_lock: "true"
      discovery.type: single-node
    volumes:
      - ${SECRETS_DIR}/elastic_stack/elasticsearch/config/elasticsearch.yml:${ELASTIC_DIR}/config/elasticsearch.yml:ro
      - ${SECRETS_DIR}/elastic_stack/elasticsearch/data:/usr/share/elasticsearch/data
    secrets:
      - source: elasticsearch.keystore
        target: ${ELASTIC_DIR}/config/elasticsearch.keystore
      - source: ca.crt
        target: ${ELASTIC_DIR}/config/ca.crt
      - source: elasticsearch.cert
        target: ${ELASTIC_DIR}/config/elasticsearch.crt
      - source: elasticsearch.key
        target: ${ELASTIC_DIR}/config/elasticsearch.key
    ports:
      - 9200:9200
      - 9300:9300
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 200000
        hard: 200000
    networks:
      - elastic-net
      - weave-net
    labels:
      com.centurylinklabs.watchtower.enable: "true"
      co.elastic.logs/enabled: true
      co.elastic.logs/module: elasticsearch
      co.elastic.logs/fileset: server
      co.elastic.metrics/raw: "[{\"module\":\"elasticsearch\",\"hosts\":\"http://elasticsearch:9200\",\"period\":\"10s\",\"xpack.enabled\":\"true\",\"username\":\"elastic\",\"password\":\"$ELASTIC__INITIAL_PASSWORD\"}]"
    healthcheck:
      test: curl -s https://elasticsearch:9200 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    container_name: kibana
    hostname: kibana
    image: docker.elastic.co/kibana/kibana:${ELK_VERSION}
    restart: unless-stopped
    volumes:
      - ${SECRETS_DIR}/elastic_stack/kibana/config/kibana.yml:${KIBANA_DIR}/config/kibana.yml:ro
      - ${SECRETS_DIR}/elastic_stack/kibana/data:/usr/share/kibana/data
    environment:
      CONFIG_DIR: ${KIBANA_DIR}/config
      ELASTICSEARCH_URL: https://elasticsearch:9200
      ELASTICSEARCH_HOSTS: https://elasticsearch:9200
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ENCRYPTION_KEY: ${XPACK_ENCRYPTION_KEY}
      KIBANA_URL: ${KIBANA_URL}
      XPACK_FLEET_AGENTS_FLEET_SERVER_HOSTS: '["https://fleet-server:8220"]'
      XPACK_FLEET_AGENTS_ELASTICSEARCH_HOSTS: '["https://elasticsearch:9200"]'
    secrets:
      - source: ca.crt
        target: ${KIBANA_DIR}/config/ca.crt
      - source: kibana.cert
        target: ${KIBANA_DIR}/config/kibana.crt
      - source: kibana.key
        target: ${KIBANA_DIR}/config/kibana.key
    ports:
      - "5601:5601"
    networks:
      - elastic-net
      - weave-net
      - proxy-net
    labels:
      co.elastic.logs/enabled: true
      co.elastic.logs/module: kibana
      co.elastic.logs/fileset: log
      co.elastic.metrics/raw: "[{\"module\":\"kibana\",\"hosts\":\"http://kibana:5601\",\"period\":\"10s\",\"xpack.enabled\":\"true\",\"username\":\"kibana_system\",\"password\":\"$ELASTIC__INITIAL_PASSWORD\"}]"
      com.centurylinklabs.watchtower.enable: "true"
    depends_on:
      - elasticsearch
    links:
      - elasticsearch
    healthcheck:
      test: curl -s https://192.168.86.140:5601/api/status >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  logstash:
    container_name: logstash
    hostname: logstash
    image: docker.elastic.co/logstash/logstash:${ELK_VERSION}
    restart: unless-stopped
    volumes:
      - ${SECRETS_DIR}/elastic_stack/logstash/config/logstash.yml:${LOGSTASH_DIR}/config/logstash.yml:ro
      - ${SECRETS_DIR}/elastic_stack/logstash/pipeline/logstash.conf:${LOGSTASH_DIR}/pipeline/logstash.conf:ro
      - ${SECRETS_DIR}/elastic_stack/logstash/pipeline/metricbeat.conf:${LOGSTASH_DIR}/pipeline/metricbeat.conf
    environment:
      CONFIG_DIR: ${LOGSTASH_DIR}/config
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      LS_JAVA_OPTS: "-Xmx${LOGSTASH_HEAP} -Xms${LOGSTASH_HEAP}"
    secrets:
      - source: ca.crt
        target: ${LOGSTASH_DIR}/config/ca.crt
      - source: logstash.cert
        target: ${LOGSTASH_DIR}/config/logstash.crt
      - source: logstash.key
        target: ${LOGSTASH_DIR}/config/logstash.key
      - source: logstash.pkcs8.key
        target: ${LOGSTASH_DIR}/config/logstash.pkcs8.key
      - source: logstash.p12
        target: ${LOGSTASH_DIR}/config/logstash.p12
    networks:
      - elastic-net
      - weave-net
    labels:
      com.centurylinklabs.watchtower.enable: "true"
    expose:
      - 12201/udp
      - 5044:5044
      - 9600
      - 5000/tcp
      - 5000/udp
    depends_on:
      - elasticsearch
      - kibana
    links:
      - elasticsearch
      - kibana
    healthcheck:
      test: curl -s https://logstash:9600 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  fleet-server:
    image: docker.elastic.co/beats/elastic-agent:${ELK_VERSION}
    container_name: elastic-agent
    restart: always
    user: root # note, synthetic browser monitors require this set to `elastic-agent`
    environment:
      ##
      ## Common Variables
      ##
      #
      # (string) The Elasticsearch host to communicate with.
      #
      # Default: http://elasticsearch:9200
      ELASTICSEARCH_HOST: https://elasticsearch:9200
      # (string) The basic authentication username used to connect to Kibana and retrieve a
      # service_token for Fleet.
      #
      # Default: elastic
      ELASTICSEARCH_USERNAME: ${ELASTIC_USERNAME}
      # (string) The basic authentication password used to connect to Kibana and retrieve a
      # service_token for Fleet.
      #
      # Default: changeme
      ELASTICSEARCH_PASSWORD: ${ELASTICSEARCH_PASSWORD}
      # (string) The path to a certificate authority.
      #
      # By default, Elastic Agent uses the list of trusted certificate authorities (CA) from the
      # operating system where it is running. If the certificate authority that signed your node
      # certificates is not in the host system’s trusted certificate authorities list, use this
      # config to add the path to the .pem file that contains your CA’s certificate.
      #
      # Default: ""
      ELASTICSEARCH_CA: ${FLEET_DIR}/config/ca.crt
      # (string) The Kibana host.
      #
      # Default: http://kibana:5601
      KIBANA_HOST: https://kibana:5601
      # (string) The basic authentication username used to connect to Kibana to retrieve
      # a service_token.
      #
      # Default: elastic
      KIBANA_USERNAME: ${ELASTIC_USERNAME}
      # (string) The basic authentication password used to connect to Kibana to retrieve
      # a service_token.
      #
      # Default: changeme
      KIBANA_PASSWORD: ${ELASTICSEARCH_PASSWORD}
      # (string) The path to a certificate authority.
      #
      # By default, Elastic Agent uses the list of trusted certificate authorities (CA) from the
      # operating system where it is running. If the certificate authority that signed your
      # node certificates is not in the host system’s trusted certificate authorities list, use
      # this config to add the path to the .pem file that contains your CA’s certificate.
      #
      # Default: ""
      KIBANA_CA: ${FLEET_DIR}/config/ca.crt
      ##
      ## Prepare Kibana for Fleet
      ##
      #
      # (int) Set to 1 to enable Fleet setup. Enabling Fleet is required before Fleet Server
      # will start. When this action is not performed, a user must manually log in to Kibana
      # and visit the Fleet page to enable setup.
      #
      # Default: none
      KIBANA_FLEET_SETUP: 1
      ##
      ## Prepare Kibana for Fleet
      ##
      #
      # (int) Set to 1 to bootstrap Fleet Server on this Elastic Agent. When set to 1, this
      # automatically forces Fleet enrollment as well.
      #
      # Default: none
      FLEET_SERVER_ENABLE: 1
      # (string) The name of the policy for Fleet Server to use on itself. Overrides
      # FLEET_TOKEN_POLICY_NAME when set.
      #
      # Default: none
      FLEET_SERVER_POLICY_NAME: fleet-server
      #
      # (string) Service token to use for communication with Elasticsearch and Kibana if
      # KIBANA_FLEET_SETUP is enabled. If the service token value and service token path are
      # specified the value may be used for setup and the path is passed to the agent in
      # the container.
      #
      # Default: none
      FLEET_SERVER_SERVICE_TOKEN: ${FLEET_SERVER_SERVICE_TOKEN}
      # (bool) Set to 1 to enroll the Elastic Agent into Fleet Server.
      #
      # Default: false
      # FLEET_ENROLL: 1
    secrets:
      - source: ca.crt
        target: ${FLEET_DIR}/config/ca.crt
      - source: fleet-server.cert
        target: ${FLEET_DIR}/config/fleet-server.cert
      - source: fleet-server.key
        target: ${FLEET_DIR}/config/fleet-server.key
    networks:
      - elastic-net
      - weave-net
    labels:
      com.centurylinklabs.watchtower.enable: "true"
    ports:
      - 8220:8220
    healthcheck:
      test: curl -s https://elastic-agent:8220 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  filebeat:
    container_name: filebeat
    hostname: filebeat
    image: docker.elastic.co/beats/filebeat:${ELK_VERSION}
    restart: unless-stopped
    user: root #/var/run/docker.sock
    command:
      - -e
      # Disable config file permissions checks. Allows mounting
      # 'config/filebeat.yml' even if it's not owned by root.
      # see: https://www.elastic.co/guide/en/beats/libbeat/current/config-file-permissions.html
      - --strict.perms=false
    volumes:
      - ${SECRETS_DIR}/elastic_stack/filebeat/config/filebeat.yml:${FILEBEAT_DIR}/filebeat.yml:ro
      - type: bind
        source: /var/lib/docker/containers
        target: /var/lib/docker/containers
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    environment:
      CONFIG_DIR: ${FILEBEAT_DIR}/config
      FILEBEAT_INTERNAL_PASSWORD: '${FILEBEAT_INTERNAL_PASSWORD:-}'
      BEATS_SYSTEM_PASSWORD: '${ELASTIC_PASSWORD}'
      LS_JAVA_OPTS: "-Xmx${FILEBEAT_HEAP} -Xms${FILEBEAT_HEAP}"
    secrets:
      - source: ca.crt
        target: ${FILEBEAT_DIR}/config/ca.crt
      - source: filebeat.cert
        target: ${FILEBEAT_DIR}/config/filebeat.crt
      - source: filebeat.key
        target: ${FILEBEAT_DIR}/config/filebeat.key
    expose:
      - 9000
    networks:
      - elastic-net
      - weave-net
    labels:
      com.centurylinklabs.watchtower.enable: "true"
      co.elastic.logs/enabled: true
      co.elastic.metrics/raw: "[{\"module\":\"beat\",\"hosts\":\"filebeat:5066\",\"period\":\"10s\",\"xpack.enabled\":\"true\"}]"
    healthcheck:
      interval: 10s
      retries: 12
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:5066/

  metricbeat:
    image: docker.elastic.co/beats/metricbeat:${ELK_VERSION}
    container_name: metricbeat
    # Run as 'root' instead of 'metricbeat' (uid 1000) to allow reading
    # 'docker.sock' and the host's filesystem.
    user: root
    command:
      # Log to stderr.
      - -e
      # Disable config file permissions checks. Allows mounting
      # 'config/metricbeat.yml' even if it's not owned by root.
      # see: https://www.elastic.co/guide/en/beats/libbeat/current/config-file-permissions.html
      - --strict.perms=false
      # Mount point of the host’s filesystem. Required to monitor the host
      # from within a container.
      - --system.hostfs=/hostfs
    volumes:
      - ${SECRETS_DIR}/elastic_stack/metricbeat/config/metricbeat.yml:${METRICBEAT_DIR}/config/metricbeat.yml:ro,Z
      - type: bind
        source: /
        target: /hostfs
        read_only: true
      - type: bind
        source: /sys/fs/cgroup
        target: /hostfs/sys/fs/cgroup
        read_only: true
      - type: bind
        source: /proc
        target: /hostfs/proc
        read_only: true
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
    environment:
      CONFIG_DIR: ${METRICBEAT_DIR}/config
      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${ELASTIC_PASSWORD}
    secrets:
      - source: ca.crt
        target: ${FLEET_DIR}/config/ca.crt
      - source: fleet-server.cert
        target: ${FLEET_DIR}/config/fleet-server.cert
      - source: fleet-server.key
        target: ${FLEET_DIR}/config/fleet-server.key
    networks:
      - elastic-net
      - weave-net
    labels:
      com.centurylinklabs.watchtower.enable: "true"
    depends_on:
      - elasticsearch
    healthcheck:
      test: metricbeat --strict.perms=false test config
